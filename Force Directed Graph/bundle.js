(function (d3$1) {
  'use strict';

  const drag = simulation => {
    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }
    
    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }
    
    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
    
    
    return d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended);
  };

  var highlightLink = [];
  var allLinkID = {};

  const renderFDG = (nodes, links, max) => {
    const svg = d3$1.select('#svg1');
  	const width = +svg.attr('width');
  	const height = +svg.attr('height');
    const g = svg
    .append('g');
  	
    const simulation = d3$1.forceSimulation(nodes)
    		.force("link", d3.forceLink(links).id(d => d.id))
        .force("charge", d3.forceManyBody())
        .force("center", d3.forceCenter(width / 2, height / 2));
    svg.attr("viewBox", [200, 200, width, height]);

    //link
    const link = g.attr("stroke", "#999")
    	.selectAll("line")
      .data(links)
      .join("line")
    	.attr("stroke", "#bfbfbf")
      .attr("stroke-width", d => Math.sqrt(d.value))
    	.attr("id", d => "L" + d.source.id + "x" +d.target.id)
    	.style("opacity", 0.3)
    ;
  	
    const classColor = {"1": "#69647b",
                        "2": "#e2cdbc",
                       	"3": "#a56c41",
                        "4": "#2d241f",
                        "5": "#7b8b6f"};
    
    //node
    const node = svg.append("g")
        .attr("stroke", "#ffffff")
        .attr("stroke-width", 1.5)
      	.selectAll("circle")
      	.data(nodes)
      	.join("circle")
        .attr("r", 5)
        .style("fill", function(d) { return classColor[d.group];})
        .call(drag(simulation))
    
    		.on("click", datum => {
        	var id = datum.path[0].childNodes[0].__data__.id;
    			console.log("#row"+id);
  				d3.selectAll("rect")
            .style("stroke-width", "1px")
            .style("stroke", "#bfbfbf");
        	highlightLink.forEach((d) => {
          	d3.select(d)
              .attr("stroke-width", 1)
              .attr("stroke", "#999");
          });
          highlightLink.length = 0;
          for(var i=1;i<=max;i++) {
            d3.select("#g"+i+"x"+id).style("stroke-width", "3px").style("stroke", "#965454");
            d3.select("#g"+id+"x"+i).style("stroke-width", "3px").style("stroke", "#965454");
          }
          d3.select("#t1")
          	.attr("fill", "#656565")
    	  		.attr("font-size",25)
            .text("Selected node:" + id + ", row and column has been highlighted.");
          
  			});
    		
    
    d3.select('svg').call(
      d3.zoom()
      .extent([[0, 0],[450, 600],])
      .scaleExtent([1, 8])
      .on('zoom', zoomFunct));

    function zoomFunct({ transform }) {
      link.attr('transform', transform);
      node.attr('transform', transform);
    }

    
    node.append("title")
        .text(d => d.id);

    simulation.on("tick", () => {
      link
          .attr("x1", d => d.source.x)
          .attr("y1", d => d.source.y)
          .attr("x2", d => d.target.x)
          .attr("y2", d => d.target.y);

      node
          .attr("cx", d => d.x)
          .attr("cy", d => d.y);
    });

    return svg.node();
  };


  const renderAD = (matrix, nodes) => {
    const margin = { top: 10, right: 40, bottom: 50, left: 10};
  	const size = 7;
    var svg2=d3.select("#ad").append("svg")
    .attr("width", 3000)
    .attr("height", 3000)
    .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");
      svg2.append('text')
        .attr('id', 't1')
        .attr('y', +35)
        .attr('x', +50)
        .attr("fill", "#656565")
    	  .attr("font-size",25)
        .text('Node-link Diagrams vs. Adjacency Matrix');
    
    matrix.forEach((m,i) => {
      svg2.append("g")
        .attr("transform","translate(50,50)")
        .attr("id","row"+(i+1))
        .selectAll("rect")
        .data(m)
        .enter()
        .append("rect")
      	.style("stroke", "#bfbfbf")
      	.style("fill", "#656565")
        .attr("width",size)
        .attr("height",size)
        .attr("x", d=> d.x*size)
        .attr("y", d=> d.y*size)
      	.attr("id", d=> "g" + (d.x+1)+"x"+(d.y+1))
      	
        .style("fill-opacity", d=> d.weight * 1)

      	.on("click", datum => {
        	d3.selectAll("rect").style("stroke-width", "1px").style("stroke", "#bfbfbf");
        	highlightLink.forEach((d) => {
          	d3.select(d).attr("stroke-width", 1).attr("stroke", "#999");
          });
        	highlightLink.length = 0;
        	d3.select("#"+datum.path[0].id).style("stroke-width", "3px").style("stroke", "#965454");
        	if(datum.path[0].style['fillOpacity'] == "0"){
            var tmp = datum.path[0].id.replace('g', '');
            tmp = tmp.split('x');
          	d3.select("#t1").text("There is no link between node " + tmp[0] + " and node " + tmp[1]);
          }else {
            var tmp = datum.path[0].id.replace('g', '');
            tmp = tmp.split('x');
            if(allLinkID[datum.path[0].id.replace('g', 'L')]){
          		d3.select("#t1")
              	.attr("fill", "#656565")
    	  				.attr("font-size",25)
                .text("The link between node " + tmp[0] + " and node " + tmp[1] + " has been highlighted.");
          		d3.select("#"+datum.path[0].id.replace('g', 'L')).attr("stroke-width", 3).attr("stroke", "#965454");
          		highlightLink.push("#"+datum.path[0].id.replace('g', 'L'));
            }else {
            	d3.select("#t1")
              	.attr("fill", "#656565")
    	  				.attr("font-size",25)
                .text("The link between node " + tmp[0] + " and node " + tmp[1] + " has been highlighted.");
          		d3.select("#L"+tmp[1]+"x"+tmp[0]).attr("stroke-width", 3).attr("stroke", "#965454");
              highlightLink.push("#L"+tmp[1]+"x"+tmp[0]);
            }
          }
        });
    });  

    const classColor = {"1": "#69647b",
                        "2": "#e2cdbc",
                       	"3": "#a56c41",
                        "4": "#2d241f",
                        "5": "#7b8b6f"};
    
  	svg2
  		.append("g")
  		.attr("transform","translate(50,47)")
  		.selectAll("text")
  		.data(nodes)
  		.enter()
  		.append("text")
  		.attr("x", (d,i) => i * size + size/2)
  		.text(d => d.id)
  		.style("text-anchor","middle")
  		.style("font-size","5px")
    	.style("fill", function(d) { return classColor[d.group];});

  	svg2
  		.append("g").attr("transform","translate(45,52.5)")
  		.selectAll("text")
  		.data(nodes)
  		.enter()
  		.append("text")
  		.attr("y",(d,i) => i * size + size/2)
  		.text(d => d.id)
  		.style("text-anchor","middle")
  		.style("font-size","5px")
  		.style("fill", function(d) { return classColor[d.group];});
  };

  // Read Dataset
  d3.csv('infect-dublin.edges').then( data => {
    var max = 0;
    var min = 9999;
    var links = [];
    var countLinks = [];
    for (var i = 0; i <= 1000; i++) {
    	countLinks.push(0);
    }
    var key = Object.keys(data[0])[0];
    links.push({source: key.split(' ')[0], target: key.split(' ')[1], value : 1});
    allLinkID["L"+key.split(' ')[0]+"x"+key.split(' ')[1]] = 1;
    data.forEach((d) => {
      key = Object.keys(d);
      var tmp = d[Object.keys(d)].split(' ');
      delete d[Object.keys(d)];
      d.source = tmp[0];
      d.target = tmp[1];
      d.value = 1;
      if(parseInt(tmp[0], 10) > max) max = d.source;
      if(parseInt(tmp[1], 10) > max) max = d.target;
      if(parseInt(tmp[0], 10) < min) min = d.source;
      if(parseInt(tmp[1], 10) < min) min = d.target;
      links.push(d);
      allLinkID["L"+d.source+"x"+d.target] = 1;
      countLinks[parseInt(tmp[0], 10)] += 1;
      countLinks[parseInt(tmp[1], 10)] += 1;
    });
    var nodes = [];
  	for (var i = min; i <= max; i++) {
      nodes.push({
      id: String(i),
      group: Math.ceil(countLinks[i]/10)
  			});
  	}
  	var edgeHash = {};
    links.forEach((d) => {
      var id = d.source + "-" + d.target;
      edgeHash[id] = 1;
      var id = d.target + "-" + d.source;
      edgeHash[id] = 1;
    });
    
    var matrix = [];
    for(var y=min; y<=max; y++) {
      var row = [];
    	for(var x=min; x<=max; x++) {
      	var grid = {x: x-1, y: y-1, weight: 0};
        if(edgeHash[y + "-" + x]){
        	grid.weight = 1;
        }
        row.push(grid);
      }
      matrix.push(row);
    }
    //console.log(allLinkID);
    renderFDG(nodes, links, max);
    renderAD(matrix, nodes);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNzdixcbiAgdGV4dCxcbiAgdHN2LFxuICBzZWxlY3QsXG4gIGZvcmNlU2ltdWxhdGlvbixcbiAgZm9yY2VMaW5rLFxuICBmb3JjZU1hbnlCb2R5LFxuICBmb3JjZUNlbnRlclxufSBmcm9tICdkMyc7XG5cbmNvbnN0IGRyYWcgPSBzaW11bGF0aW9uID0+IHtcbiAgZnVuY3Rpb24gZHJhZ3N0YXJ0ZWQoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50LmFjdGl2ZSkgc2ltdWxhdGlvbi5hbHBoYVRhcmdldCgwLjMpLnJlc3RhcnQoKTtcbiAgICBldmVudC5zdWJqZWN0LmZ4ID0gZXZlbnQuc3ViamVjdC54O1xuICAgIGV2ZW50LnN1YmplY3QuZnkgPSBldmVudC5zdWJqZWN0Lnk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGRyYWdnZWQoZXZlbnQpIHtcbiAgICBldmVudC5zdWJqZWN0LmZ4ID0gZXZlbnQueDtcbiAgICBldmVudC5zdWJqZWN0LmZ5ID0gZXZlbnQueTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gZHJhZ2VuZGVkKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudC5hY3RpdmUpIHNpbXVsYXRpb24uYWxwaGFUYXJnZXQoMCk7XG4gICAgZXZlbnQuc3ViamVjdC5meCA9IG51bGw7XG4gICAgZXZlbnQuc3ViamVjdC5meSA9IG51bGw7XG4gIH1cbiAgXG4gIFxuICByZXR1cm4gZDMuZHJhZygpXG4gICAgICAub24oXCJzdGFydFwiLCBkcmFnc3RhcnRlZClcbiAgICAgIC5vbihcImRyYWdcIiwgZHJhZ2dlZClcbiAgICAgIC5vbihcImVuZFwiLCBkcmFnZW5kZWQpO1xufVxuXG52YXIgaGlnaGxpZ2h0TGluayA9IFtdO1xudmFyIGFsbExpbmtJRCA9IHt9O1xuXG5jb25zdCByZW5kZXJGREcgPSAobm9kZXMsIGxpbmtzLCBtYXgpID0+IHtcbiAgY29uc3Qgc3ZnID0gc2VsZWN0KCcjc3ZnMScpO1xuXHRjb25zdCB3aWR0aCA9ICtzdmcuYXR0cignd2lkdGgnKTtcblx0Y29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcbiAgY29uc3QgbWFyZ2luID0geyB0b3A6IDYwLCByaWdodDogNDAsIGJvdHRvbTogNTAsIGxlZnQ6IDEwfTtcbiAgY29uc3QgaW5uZXJXaWR0aCA9IHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIGNvbnN0IGlubmVySGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gIGNvbnN0IGcgPSBzdmdcbiAgLmFwcGVuZCgnZycpO1xuXHRcbiAgY29uc3Qgc2ltdWxhdGlvbiA9IGZvcmNlU2ltdWxhdGlvbihub2RlcylcbiAgXHRcdC5mb3JjZShcImxpbmtcIiwgZDMuZm9yY2VMaW5rKGxpbmtzKS5pZChkID0+IGQuaWQpKVxuICAgICAgLmZvcmNlKFwiY2hhcmdlXCIsIGQzLmZvcmNlTWFueUJvZHkoKSlcbiAgICAgIC5mb3JjZShcImNlbnRlclwiLCBkMy5mb3JjZUNlbnRlcih3aWR0aCAvIDIsIGhlaWdodCAvIDIpKTtcbiAgc3ZnLmF0dHIoXCJ2aWV3Qm94XCIsIFsyMDAsIDIwMCwgd2lkdGgsIGhlaWdodF0pO1xuXG4gIC8vbGlua1xuICBjb25zdCBsaW5rID0gZy5hdHRyKFwic3Ryb2tlXCIsIFwiIzk5OVwiKVxuICBcdC5zZWxlY3RBbGwoXCJsaW5lXCIpXG4gICAgLmRhdGEobGlua3MpXG4gICAgLmpvaW4oXCJsaW5lXCIpXG4gIFx0LmF0dHIoXCJzdHJva2VcIiwgXCIjYmZiZmJmXCIpXG4gICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgZCA9PiBNYXRoLnNxcnQoZC52YWx1ZSkpXG4gIFx0LmF0dHIoXCJpZFwiLCBkID0+IFwiTFwiICsgZC5zb3VyY2UuaWQgKyBcInhcIiArZC50YXJnZXQuaWQpXG4gIFx0LnN0eWxlKFwib3BhY2l0eVwiLCAwLjMpXG4gIDtcblx0XG4gIGNvbnN0IGNsYXNzQ29sb3IgPSB7XCIxXCI6IFwiIzY5NjQ3YlwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiMlwiOiBcIiNlMmNkYmNcIixcbiAgICAgICAgICAgICAgICAgICAgIFx0XCIzXCI6IFwiI2E1NmM0MVwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiNFwiOiBcIiMyZDI0MWZcIixcbiAgICAgICAgICAgICAgICAgICAgICBcIjVcIjogXCIjN2I4YjZmXCJ9O1xuICBcbiAgLy9ub2RlXG4gIGNvbnN0IG5vZGUgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjZmZmZmZmXCIpXG4gICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxLjUpXG4gICAgXHQuc2VsZWN0QWxsKFwiY2lyY2xlXCIpXG4gICAgXHQuZGF0YShub2RlcylcbiAgICBcdC5qb2luKFwiY2lyY2xlXCIpXG4gICAgICAuYXR0cihcInJcIiwgNSlcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY2xhc3NDb2xvcltkLmdyb3VwXTt9KVxuICAgICAgLmNhbGwoZHJhZyhzaW11bGF0aW9uKSlcbiAgXG4gIFx0XHQub24oXCJjbGlja1wiLCBkYXR1bSA9PiB7XG4gICAgICBcdHZhciBpZCA9IGRhdHVtLnBhdGhbMF0uY2hpbGROb2Rlc1swXS5fX2RhdGFfXy5pZDtcbiAgXHRcdFx0Y29uc29sZS5sb2coXCIjcm93XCIraWQpO1xuXHRcdFx0XHRkMy5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMXB4XCIpXG4gICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiI2JmYmZiZlwiKTtcbiAgICAgIFx0aGlnaGxpZ2h0TGluay5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFx0ZDMuc2VsZWN0KGQpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjOTk5XCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaGlnaGxpZ2h0TGluay5sZW5ndGggPSAwO1xuICAgICAgICBmb3IodmFyIGk9MTtpPD1tYXg7aSsrKSB7XG4gICAgICAgICAgZDMuc2VsZWN0KFwiI2dcIitpK1wieFwiK2lkKS5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjNweFwiKS5zdHlsZShcInN0cm9rZVwiLCBcIiM5NjU0NTRcIik7XG4gICAgICAgICAgZDMuc2VsZWN0KFwiI2dcIitpZCtcInhcIitpKS5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjNweFwiKS5zdHlsZShcInN0cm9rZVwiLCBcIiM5NjU0NTRcIik7XG4gICAgICAgIH1cbiAgICAgICAgZDMuc2VsZWN0KFwiI3QxXCIpXG4gICAgICAgIFx0LmF0dHIoXCJmaWxsXCIsIFwiIzY1NjU2NVwiKVxuICBcdCAgXHRcdC5hdHRyKFwiZm9udC1zaXplXCIsMjUpXG4gICAgICAgICAgLnRleHQoXCJTZWxlY3RlZCBub2RlOlwiICsgaWQgKyBcIiwgcm93IGFuZCBjb2x1bW4gaGFzIGJlZW4gaGlnaGxpZ2h0ZWQuXCIpO1xuICAgICAgICBcblx0XHRcdH0pO1xuICBcdFx0XG4gIFxuICBkMy5zZWxlY3QoJ3N2ZycpLmNhbGwoXG4gICAgZDMuem9vbSgpXG4gICAgLmV4dGVudChbWzAsIDBdLFs0NTAsIDYwMF0sXSlcbiAgICAuc2NhbGVFeHRlbnQoWzEsIDhdKVxuICAgIC5vbignem9vbScsIHpvb21GdW5jdCkpO1xuXG4gIGZ1bmN0aW9uIHpvb21GdW5jdCh7IHRyYW5zZm9ybSB9KSB7XG4gICAgbGluay5hdHRyKCd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pO1xuICAgIG5vZGUuYXR0cigndHJhbnNmb3JtJywgdHJhbnNmb3JtKTtcbiAgfVxuXG4gIFxuICBub2RlLmFwcGVuZChcInRpdGxlXCIpXG4gICAgICAudGV4dChkID0+IGQuaWQpO1xuXG4gIHNpbXVsYXRpb24ub24oXCJ0aWNrXCIsICgpID0+IHtcbiAgICBsaW5rXG4gICAgICAgIC5hdHRyKFwieDFcIiwgZCA9PiBkLnNvdXJjZS54KVxuICAgICAgICAuYXR0cihcInkxXCIsIGQgPT4gZC5zb3VyY2UueSlcbiAgICAgICAgLmF0dHIoXCJ4MlwiLCBkID0+IGQudGFyZ2V0LngpXG4gICAgICAgIC5hdHRyKFwieTJcIiwgZCA9PiBkLnRhcmdldC55KTtcblxuICAgIG5vZGVcbiAgICAgICAgLmF0dHIoXCJjeFwiLCBkID0+IGQueClcbiAgICAgICAgLmF0dHIoXCJjeVwiLCBkID0+IGQueSk7XG4gIH0pO1xuXG4gIHJldHVybiBzdmcubm9kZSgpO1xufTtcblxuXG5jb25zdCByZW5kZXJBRCA9IChtYXRyaXgsIG5vZGVzKSA9PiB7XG4gIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiAxMCwgcmlnaHQ6IDQwLCBib3R0b206IDUwLCBsZWZ0OiAxMH07XG5cdGNvbnN0IHNpemUgPSA3O1xuICB2YXIgc3ZnMj1kMy5zZWxlY3QoXCIjYWRcIikuYXBwZW5kKFwic3ZnXCIpXG4gIC5hdHRyKFwid2lkdGhcIiwgMzAwMClcbiAgLmF0dHIoXCJoZWlnaHRcIiwgMzAwMClcbiAgLmFwcGVuZChcImdcIilcbiAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgIHN2ZzIuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdpZCcsICd0MScpXG4gICAgICAuYXR0cigneScsICszNSlcbiAgICAgIC5hdHRyKCd4JywgKzUwKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzY1NjU2NVwiKVxuICBcdCAgLmF0dHIoXCJmb250LXNpemVcIiwyNSlcbiAgICAgIC50ZXh0KCdOb2RlLWxpbmsgRGlhZ3JhbXMgdnMuIEFkamFjZW5jeSBNYXRyaXgnKTtcbiAgXG4gIG1hdHJpeC5mb3JFYWNoKChtLGkpID0+IHtcbiAgICBzdmcyLmFwcGVuZChcImdcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoNTAsNTApXCIpXG4gICAgICAuYXR0cihcImlkXCIsXCJyb3dcIisoaSsxKSlcbiAgICAgIC5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgICAuZGF0YShtKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgXHQuc3R5bGUoXCJzdHJva2VcIiwgXCIjYmZiZmJmXCIpXG4gICAgXHQuc3R5bGUoXCJmaWxsXCIsIFwiIzY1NjU2NVwiKVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLHNpemUpXG4gICAgICAuYXR0cihcImhlaWdodFwiLHNpemUpXG4gICAgICAuYXR0cihcInhcIiwgZD0+IGQueCpzaXplKVxuICAgICAgLmF0dHIoXCJ5XCIsIGQ9PiBkLnkqc2l6ZSlcbiAgICBcdC5hdHRyKFwiaWRcIiwgZD0+IFwiZ1wiICsgKGQueCsxKStcInhcIisoZC55KzEpKVxuICAgIFx0XG4gICAgICAuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwgZD0+IGQud2VpZ2h0ICogMSlcblxuICAgIFx0Lm9uKFwiY2xpY2tcIiwgZGF0dW0gPT4ge1xuICAgICAgXHRkMy5zZWxlY3RBbGwoXCJyZWN0XCIpLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMXB4XCIpLnN0eWxlKFwic3Ryb2tlXCIsIFwiI2JmYmZiZlwiKTtcbiAgICAgIFx0aGlnaGxpZ2h0TGluay5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFx0ZDMuc2VsZWN0KGQpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSkuYXR0cihcInN0cm9rZVwiLCBcIiM5OTlcIik7XG4gICAgICAgIH0pO1xuICAgICAgXHRoaWdobGlnaHRMaW5rLmxlbmd0aCA9IDA7XG4gICAgICBcdGQzLnNlbGVjdChcIiNcIitkYXR1bS5wYXRoWzBdLmlkKS5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjNweFwiKS5zdHlsZShcInN0cm9rZVwiLCBcIiM5NjU0NTRcIik7XG4gICAgICBcdGlmKGRhdHVtLnBhdGhbMF0uc3R5bGVbJ2ZpbGxPcGFjaXR5J10gPT0gXCIwXCIpe1xuICAgICAgICAgIHZhciB0bXAgPSBkYXR1bS5wYXRoWzBdLmlkLnJlcGxhY2UoJ2cnLCAnJyk7XG4gICAgICAgICAgdG1wID0gdG1wLnNwbGl0KCd4Jyk7XG4gICAgICAgIFx0ZDMuc2VsZWN0KFwiI3QxXCIpLnRleHQoXCJUaGVyZSBpcyBubyBsaW5rIGJldHdlZW4gbm9kZSBcIiArIHRtcFswXSArIFwiIGFuZCBub2RlIFwiICsgdG1wWzFdKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgdmFyIHRtcCA9IGRhdHVtLnBhdGhbMF0uaWQucmVwbGFjZSgnZycsICcnKTtcbiAgICAgICAgICB0bXAgPSB0bXAuc3BsaXQoJ3gnKTtcbiAgICAgICAgICBpZihhbGxMaW5rSURbZGF0dW0ucGF0aFswXS5pZC5yZXBsYWNlKCdnJywgJ0wnKV0pe1xuICAgICAgICBcdFx0ZDMuc2VsZWN0KFwiI3QxXCIpXG4gICAgICAgICAgICBcdC5hdHRyKFwiZmlsbFwiLCBcIiM2NTY1NjVcIilcbiAgXHQgIFx0XHRcdFx0LmF0dHIoXCJmb250LXNpemVcIiwyNSlcbiAgICAgICAgICAgICAgLnRleHQoXCJUaGUgbGluayBiZXR3ZWVuIG5vZGUgXCIgKyB0bXBbMF0gKyBcIiBhbmQgbm9kZSBcIiArIHRtcFsxXSArIFwiIGhhcyBiZWVuIGhpZ2hsaWdodGVkLlwiKTtcbiAgICAgICAgXHRcdGQzLnNlbGVjdChcIiNcIitkYXR1bS5wYXRoWzBdLmlkLnJlcGxhY2UoJ2cnLCAnTCcpKS5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDMpLmF0dHIoXCJzdHJva2VcIiwgXCIjOTY1NDU0XCIpO1xuICAgICAgICBcdFx0aGlnaGxpZ2h0TGluay5wdXNoKFwiI1wiK2RhdHVtLnBhdGhbMF0uaWQucmVwbGFjZSgnZycsICdMJykpO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgIFx0ZDMuc2VsZWN0KFwiI3QxXCIpXG4gICAgICAgICAgICBcdC5hdHRyKFwiZmlsbFwiLCBcIiM2NTY1NjVcIilcbiAgXHQgIFx0XHRcdFx0LmF0dHIoXCJmb250LXNpemVcIiwyNSlcbiAgICAgICAgICAgICAgLnRleHQoXCJUaGUgbGluayBiZXR3ZWVuIG5vZGUgXCIgKyB0bXBbMF0gKyBcIiBhbmQgbm9kZSBcIiArIHRtcFsxXSArIFwiIGhhcyBiZWVuIGhpZ2hsaWdodGVkLlwiKTtcbiAgICAgICAgXHRcdGQzLnNlbGVjdChcIiNMXCIrdG1wWzFdK1wieFwiK3RtcFswXSkuYXR0cihcInN0cm9rZS13aWR0aFwiLCAzKS5hdHRyKFwic3Ryb2tlXCIsIFwiIzk2NTQ1NFwiKTtcbiAgICAgICAgICAgIGhpZ2hsaWdodExpbmsucHVzaChcIiNMXCIrdG1wWzFdK1wieFwiK3RtcFswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICB9KTsgIFxuXG4gIGNvbnN0IGNsYXNzQ29sb3IgPSB7XCIxXCI6IFwiIzY5NjQ3YlwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiMlwiOiBcIiNlMmNkYmNcIixcbiAgICAgICAgICAgICAgICAgICAgIFx0XCIzXCI6IFwiI2E1NmM0MVwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiNFwiOiBcIiMyZDI0MWZcIixcbiAgICAgICAgICAgICAgICAgICAgICBcIjVcIjogXCIjN2I4YjZmXCJ9O1xuICBcblx0c3ZnMlxuXHRcdC5hcHBlbmQoXCJnXCIpXG5cdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSg1MCw0NylcIilcblx0XHQuc2VsZWN0QWxsKFwidGV4dFwiKVxuXHRcdC5kYXRhKG5vZGVzKVxuXHRcdC5lbnRlcigpXG5cdFx0LmFwcGVuZChcInRleHRcIilcblx0XHQuYXR0cihcInhcIiwgKGQsaSkgPT4gaSAqIHNpemUgKyBzaXplLzIpXG5cdFx0LnRleHQoZCA9PiBkLmlkKVxuXHRcdC5zdHlsZShcInRleHQtYW5jaG9yXCIsXCJtaWRkbGVcIilcblx0XHQuc3R5bGUoXCJmb250LXNpemVcIixcIjVweFwiKVxuICBcdC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY2xhc3NDb2xvcltkLmdyb3VwXTt9KVxuXG5cdHN2ZzJcblx0XHQuYXBwZW5kKFwiZ1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoNDUsNTIuNSlcIilcblx0XHQuc2VsZWN0QWxsKFwidGV4dFwiKVxuXHRcdC5kYXRhKG5vZGVzKVxuXHRcdC5lbnRlcigpXG5cdFx0LmFwcGVuZChcInRleHRcIilcblx0XHQuYXR0cihcInlcIiwoZCxpKSA9PiBpICogc2l6ZSArIHNpemUvMilcblx0XHQudGV4dChkID0+IGQuaWQpXG5cdFx0LnN0eWxlKFwidGV4dC1hbmNob3JcIixcIm1pZGRsZVwiKVxuXHRcdC5zdHlsZShcImZvbnQtc2l6ZVwiLFwiNXB4XCIpXG5cdFx0LnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjbGFzc0NvbG9yW2QuZ3JvdXBdO30pXG59O1xuXG4vLyBSZWFkIERhdGFzZXRcbmQzLmNzdignaW5mZWN0LWR1Ymxpbi5lZGdlcycpLnRoZW4oIGRhdGEgPT4ge1xuICB2YXIgbWF4ID0gMDtcbiAgdmFyIG1pbiA9IDk5OTk7XG4gIHZhciBsaW5rcyA9IFtdO1xuICB2YXIgY291bnRMaW5rcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8PSAxMDAwOyBpKyspIHtcbiAgXHRjb3VudExpbmtzLnB1c2goMCk7XG4gIH1cbiAgdmFyIGtleSA9IE9iamVjdC5rZXlzKGRhdGFbMF0pWzBdO1xuICBsaW5rcy5wdXNoKHtzb3VyY2U6IGtleS5zcGxpdCgnICcpWzBdLCB0YXJnZXQ6IGtleS5zcGxpdCgnICcpWzFdLCB2YWx1ZSA6IDF9KTtcbiAgYWxsTGlua0lEW1wiTFwiK2tleS5zcGxpdCgnICcpWzBdK1wieFwiK2tleS5zcGxpdCgnICcpWzFdXSA9IDE7XG4gIGRhdGEuZm9yRWFjaCgoZCkgPT4ge1xuICAgIGtleSA9IE9iamVjdC5rZXlzKGQpO1xuICAgIHZhciB0bXAgPSBkW09iamVjdC5rZXlzKGQpXS5zcGxpdCgnICcpO1xuICAgIGRlbGV0ZSBkW09iamVjdC5rZXlzKGQpXTtcbiAgICBkLnNvdXJjZSA9IHRtcFswXTtcbiAgICBkLnRhcmdldCA9IHRtcFsxXTtcbiAgICBkLnZhbHVlID0gMTtcbiAgICBpZihwYXJzZUludCh0bXBbMF0sIDEwKSA+IG1heCkgbWF4ID0gZC5zb3VyY2U7XG4gICAgaWYocGFyc2VJbnQodG1wWzFdLCAxMCkgPiBtYXgpIG1heCA9IGQudGFyZ2V0O1xuICAgIGlmKHBhcnNlSW50KHRtcFswXSwgMTApIDwgbWluKSBtaW4gPSBkLnNvdXJjZTtcbiAgICBpZihwYXJzZUludCh0bXBbMV0sIDEwKSA8IG1pbikgbWluID0gZC50YXJnZXQ7XG4gICAgbGlua3MucHVzaChkKTtcbiAgICBhbGxMaW5rSURbXCJMXCIrZC5zb3VyY2UrXCJ4XCIrZC50YXJnZXRdID0gMTtcbiAgICBjb3VudExpbmtzW3BhcnNlSW50KHRtcFswXSwgMTApXSArPSAxO1xuICAgIGNvdW50TGlua3NbcGFyc2VJbnQodG1wWzFdLCAxMCldICs9IDE7XG4gIH0pO1xuICB2YXIgbm9kZXMgPSBbXTtcblx0Zm9yICh2YXIgaSA9IG1pbjsgaSA8PSBtYXg7IGkrKykge1xuICAgIG5vZGVzLnB1c2goe1xuICAgIGlkOiBTdHJpbmcoaSksXG4gICAgZ3JvdXA6IE1hdGguY2VpbChjb3VudExpbmtzW2ldLzEwKVxuXHRcdFx0fSk7XG5cdH1cblx0dmFyIGVkZ2VIYXNoID0ge307XG4gIGxpbmtzLmZvckVhY2goKGQpID0+IHtcbiAgICB2YXIgaWQgPSBkLnNvdXJjZSArIFwiLVwiICsgZC50YXJnZXQ7XG4gICAgZWRnZUhhc2hbaWRdID0gMTtcbiAgICB2YXIgaWQgPSBkLnRhcmdldCArIFwiLVwiICsgZC5zb3VyY2U7XG4gICAgZWRnZUhhc2hbaWRdID0gMTtcbiAgfSk7XG4gIFxuICB2YXIgbWF0cml4ID0gW107XG4gIGZvcih2YXIgeT1taW47IHk8PW1heDsgeSsrKSB7XG4gICAgdmFyIHJvdyA9IFtdO1xuICBcdGZvcih2YXIgeD1taW47IHg8PW1heDsgeCsrKSB7XG4gICAgXHR2YXIgZ3JpZCA9IHt4OiB4LTEsIHk6IHktMSwgd2VpZ2h0OiAwfTtcbiAgICAgIGlmKGVkZ2VIYXNoW3kgKyBcIi1cIiArIHhdKXtcbiAgICAgIFx0Z3JpZC53ZWlnaHQgPSAxO1xuICAgICAgfVxuICAgICAgcm93LnB1c2goZ3JpZCk7XG4gICAgfVxuICAgIG1hdHJpeC5wdXNoKHJvdyk7XG4gIH1cbiAgLy9jb25zb2xlLmxvZyhhbGxMaW5rSUQpO1xuICByZW5kZXJGREcobm9kZXMsIGxpbmtzLCBtYXgpO1xuICByZW5kZXJBRChtYXRyaXgsIG5vZGVzKTtcbn0pOyJdLCJuYW1lcyI6WyJzZWxlY3QiLCJmb3JjZVNpbXVsYXRpb24iXSwibWFwcGluZ3MiOiI7OztFQVdBLE1BQU0sSUFBSSxHQUFHLFVBQVUsSUFBSTtFQUMzQixFQUFFLFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtFQUM5QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7RUFDN0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztFQUN2QyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDLEdBQUc7RUFDSDtFQUNBLEVBQUUsU0FBUyxPQUFPLENBQUMsS0FBSyxFQUFFO0VBQzFCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUMvQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDL0IsR0FBRztFQUNIO0VBQ0Es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Q0FBQztFQUNqQyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN4QixLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM1QjtFQUNBLEVBQUUsU0FBUyxTQUFTLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBRTtFQUNwQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0VBQ3RDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7RUFDdEMsR0FBRztBQUNIO0VBQ0E7RUFDQSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0VBQ3RCLE9BQU8sSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkI7RUFDQSxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU07RUFDOUIsSUFBSSxJQUFJO0VBQ1IsU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNwQyxTQUFTLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3BDLFNBQVMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDcEMsU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JDO0VBQ0EsSUFBSSxJQUFJO0VBQ1IsU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFNBQVMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzlCLEdBQUcsQ0FBQyxDQUFDO0FBQ0w7RUFDQSxFQUFFLE9BQU8sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0VBQ3BCLENBQUMsQ0FBQztBQUNGO0FBQ0E7RUFDQSxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLEtBQUs7RUFDcEMsRUFBRSxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztFQUM3RCxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztFQUNoQixFQUFFLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztFQUN6QyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO0VBQ3RCLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7RUFDdkIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0VBQ2QsR0FBRyxJQUFJLENBQUMsV0FBVztFQUNuQixRQUFRLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBQztFQUM1RCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQ3ZCLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7RUFDdkIsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO0VBQ3JCLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztFQUNyQixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDO0VBQzlCLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7RUFDMUIsT0FBTyxJQUFJLENBQUMseUNBQXlDLENBQUMsQ0FBQztFQUN2RDtFQUNBLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7RUFDMUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztFQUNwQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7RUFDM0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDN0IsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDO0VBQ3hCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztFQUNkLE9BQU8sS0FBSyxFQUFFO0VBQ2QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQ3JCLE1BQU0sS0FBSyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7RUFDaEMsTUFBTSxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQztFQUM5QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0VBQ3pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7RUFDMUIsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztFQUM5QixPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0VBQzlCLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDL0M7RUFDQSxPQUFPLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQzlDO0VBQ0EsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssSUFBSTtFQUMzQixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0VBQ3BGLE9BQU8sYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSztFQUNwQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ3JFLFNBQVMsQ0FBQyxDQUFDO0VBQ1gsT0FBTyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUNoQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0VBQy9GLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUM7RUFDcEQsVUFBVSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQ3RELFVBQVUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDL0IsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2xHLFNBQVMsS0FBSTtFQUNiLFVBQVUsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztFQUN0RCxVQUFVLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQy9CLFVBQVUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzNELFVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDMUIsY0FBYyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQztFQUNyQyxVQUFVLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO0VBQzlCLGVBQWUsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLHdCQUF3QixDQUFDLENBQUM7RUFDMUcsVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0VBQzlHLFVBQVUsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ3JFLFdBQVcsS0FBSTtFQUNmLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDM0IsY0FBYyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQztFQUNyQyxVQUFVLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO0VBQzlCLGVBQWUsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLHdCQUF3QixDQUFDLENBQUM7RUFDMUcsVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztFQUM5RixZQUFZLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdkQsV0FBVztFQUNYLFNBQVM7RUFDVCxPQUFPLEVBQUM7RUFDUixHQUFHLENBQUMsQ0FBQztBQUNMO0VBQ0EsRUFBRSxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsRUFBRSxTQUFTO0VBQ3BDLHNCQUFzQixHQUFHLEVBQUUsU0FBUztFQUNwQyxzQkFBc0IsR0FBRyxFQUFFLFNBQVM7RUFDcEMsc0JBQXNCLEdBQUcsRUFBRSxTQUFTO0VBQ3BDLHNCQUFzQixHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7RUFDdEM7RUFDQSxDQUFDLElBQUk7RUFDTCxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7RUFDZCxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7RUFDdkMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO0VBQ3BCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztFQUNkLEdBQUcsS0FBSyxFQUFFO0VBQ1YsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQ2pCLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3hDLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDO0VBQ2xCLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7RUFDaEMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztFQUMzQixJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQzdEO0VBQ0EsQ0FBQyxJQUFJO0VBQ0wsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztFQUNyRCxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7RUFDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQ2QsR0FBRyxLQUFLLEVBQUU7RUFDVixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDakIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDdkMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUM7RUFDbEIsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztFQUNoQyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO0VBQzNCLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsRUFBRSxFQUFFLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUM7RUFDNUQsQ0FBQyxDQUFDO0FBQ0Y7RUFDQTtFQUNBLEVBQUUsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJO0VBQzVDLEVBQUUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBQ2QsRUFBRSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7RUFDakIsRUFBRSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7RUFDakIsRUFBRSxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7RUFDdEIsRUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO0VBQ2xDLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QixHQUFHO0VBQ0gsRUFBRSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3BDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2hGLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQzdELEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSztFQUN0QixJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3pCLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDM0MsSUFBSSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDN0IsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QixJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7RUFDaEIsSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0VBQ2xELElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztFQUNsRCxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7RUFDbEQsSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0VBQ2xELElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNsQixJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUM3QyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQzFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDMUMsR0FBRyxDQUFDLENBQUM7RUFDTCxFQUFFLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztFQUNqQixDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7RUFDbEMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDO0VBQ2YsSUFBSSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNqQixJQUFJLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7RUFDdEMsSUFBSSxDQUFDLENBQUM7RUFDTixFQUFFO0VBQ0YsQ0FBQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7RUFDbkIsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLO0VBQ3ZCLElBQUksSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztFQUN2QyxJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDckIsSUFBSSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0VBQ3ZDLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNyQixHQUFHLENBQUMsQ0FBQztFQUNMO0VBQ0EsRUFBRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7RUFDbEIsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO0VBQzlCLElBQUksSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0VBQ2pCLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtFQUMvQixLQUFLLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVDLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUMvQixPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQ3ZCLE9BQU87RUFDUCxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDckIsS0FBSztFQUNMLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNyQixHQUFHO0VBQ0g7RUFDQSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQy9CLEVBQUUsUUFBUSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztFQUMxQixDQUFDLENBQUM7Ozs7In0=